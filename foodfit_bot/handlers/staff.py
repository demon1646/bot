from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging
from typing import Optional

from foodfit_bot.config.database import cursor, conn
from foodfit_bot.keyboards.reply import staff_kb, cancel_kb
from foodfit_bot.keyboards.inline import build_order_control_kb
from foodfit_bot.models.states import Form
from foodfit_bot.services.database_service import (
    get_order_details,
    update_order_status,
    search_dishes,
    get_active_orders
)
from foodfit_bot.utils.helpers import format_order_date, clean_text

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üë• –†–µ–∂–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞")
@router.message(Command("staff"))
async def staff_mode(message: Message):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    await message.answer(
        "üë®‚Äçüç≥ –†–µ–∂–∏–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        reply_markup=staff_kb()
    )


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –±–ª—é–¥–∞")
async def search_dish_start(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –±–ª—é–¥–∞"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:",
        reply_markup=cancel_kb()
    )
    await state.set_state(Form.staff_search)


@router.message(Form.staff_search)
async def process_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    try:
        query = clean_text(message.text)
        if not query:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            return

        dishes = search_dishes(query)

        if not dishes:
            await message.answer("üçΩ –ë–ª—é–¥ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for dish in dishes[:5]:
            text = (
                f"üçΩ <b>{dish['name']}</b>\n"
                f"üíµ {dish['price']}‚ÇΩ | üî• {dish['calories']} –∫–∫–∞–ª\n"
                f"üè∑ –¢–µ–≥–∏: {dish.get('tags', '–Ω–µ—Ç')}"
            )

            await message.answer(text)

        await message.answer(
            "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
            reply_markup=staff_kb()
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª—é–¥: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ",
            reply_markup=staff_kb()
        )
        await state.clear()


@router.message(F.text == "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_active_orders(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    try:
        orders = get_active_orders()

        if not orders:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return

        for order in orders:
            order_info = (
                f"üÜî <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['customer_name']}\n"
                f"üìÖ {format_order_date(order['order_date'])}\n"
                f"üíµ –°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}"
            )

            await message.answer(
                order_info,
                reply_markup=build_order_control_kb(order['order_id'])
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@router.callback_query(F.data.startswith("complete_order_"))
async def complete_order(callback: CallbackQuery):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"""
    try:
        order_id = int(callback.data.split("_")[2])
        if update_order_status(order_id, "–∑–∞–≤–µ—Ä—à–µ–Ω"):
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
            )
            await callback.answer()
        else:
            await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_order_details(order_id)

        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        items_text = "\n".join(
            f"‚Ä¢ {item['name']} √ó {item['quantity']} ‚Äî {item['price'] * item['quantity']}‚ÇΩ"
            for item in order['items']
        )

        response = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['customer_name']}\n"
            f"üìÖ {format_order_date(order['order_date'])}\n"
            f"üíµ –°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{items_text}"
        )

        await callback.message.answer(response)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def ask_order_number(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_order_id)


@router.message(Form.waiting_for_order_id)
async def process_order_completion(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É"""
    try:
        order_id = int(message.text)
        if update_order_status(order_id, "–∑–∞–≤–µ—Ä—à–µ–Ω"):
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π",
                reply_markup=staff_kb()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑",
                reply_markup=staff_kb()
            )
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
            reply_markup=staff_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=staff_kb()
        )
    finally:
        await state.clear()


@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def refresh_orders(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    await show_active_orders(message)


@router.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def exit_staff_mode(message: Message):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"""
    await message.answer(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    from foodfit_bot.keyboards.reply import main_menu_kb
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )