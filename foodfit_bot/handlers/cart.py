from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime
import logging
from aiogram.filters import Command
from typing import Union
from foodfit_bot.config.database import cursor, conn
from foodfit_bot.keyboards.inline import build_cart_keyboard
from foodfit_bot.keyboards.reply import main_menu_kb
from foodfit_bot.services.database_service import get_dish_info

router = Router()
logger = logging.getLogger(__name__)

# ---------------------- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã ----------------------
@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@router.message(Command("cart"))
async def show_cart(message: Union[Message, CallbackQuery]):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if isinstance(message, CallbackQuery):
        user_id = message.from_user.id
        message = message.message
    else:
        user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute('''
            SELECT c.cart_id, c.dish_id, m.name, m.price, c.quantity, m.calories, m.photo 
            FROM cart c 
            JOIN menu m ON c.dish_id = m.dish_id 
            WHERE c.user_id = ?
        ''', (user_id,))
        items = cursor.fetchall()

        if not items:
            await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_amount = 0
        total_calories = 0
        cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"

        for item in items:
            _, dish_id, name, price, quantity, calories, photo = item
            item_total = price * quantity
            cart_text += f"‚Ä¢ {name}\n   {price}‚ÇΩ √ó {quantity} = {item_total}‚ÇΩ\n"
            total_amount += item_total
            total_calories += calories * quantity

        cart_text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total_amount}‚ÇΩ\n"
        cart_text += f"<b>–ö–∞–ª–æ—Ä–∏–∏:</b> {total_calories} –∫–∫–∞–ª"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            cart_text,
            reply_markup=build_cart_keyboard(items)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

# ---------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É ----------------------
@router.callback_query(F.data.startswith("cart_"))
async def add_to_cart(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        user_id = callback.from_user.id
        dish_id = int(callback.data.split("_")[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cursor.execute("""
            SELECT quantity FROM cart 
            WHERE user_id = ? AND dish_id = ?
        """, (user_id, dish_id))
        existing_item = cursor.fetchone()

        if existing_item:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute("""
                UPDATE cart SET quantity = quantity + 1 
                WHERE user_id = ? AND dish_id = ?
            """, (user_id, dish_id))
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute("""
                INSERT INTO cart (user_id, dish_id, quantity)
                VALUES (?, ?, 1)
            """, (user_id, dish_id))

        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        dish_name = cursor.execute("""
            SELECT name FROM menu WHERE dish_id = ?
        """, (dish_id,)).fetchone()[0]

        await callback.answer(f"‚úÖ {dish_name} –¥–æ–±–∞–≤–ª–µ–Ω(–æ) –≤ –∫–æ—Ä–∑–∏–Ω—É")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

# ---------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º ----------------------
@router.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    await _update_quantity(callback, +1)

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: CallbackQuery):
    """–£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    await _update_quantity(callback, -1)

async def _update_quantity(callback: CallbackQuery, delta: int):
    try:
        user_id = callback.from_user.id
        dish_id = int(callback.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("""
            SELECT quantity FROM cart 
            WHERE user_id = ? AND dish_id = ?
        """, (user_id, dish_id))
        current_qty = cursor.fetchone()[0]

        new_qty = current_qty + delta

        if new_qty < 1:
            await callback.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 1")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cursor.execute("""
            UPDATE cart SET quantity = ? 
            WHERE user_id = ? AND dish_id = ?
        """, (new_qty, user_id, dish_id))
        conn.commit()

        await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {new_qty}")
        await show_cart(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", show_alert=True)

# ---------------------- –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ----------------------
@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –±–ª—é–¥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = callback.from_user.id
        dish_id = int(callback.data.split("_")[1])

        cursor.execute("""
            DELETE FROM cart 
            WHERE user_id = ? AND dish_id = ?
        """, (user_id, dish_id))
        conn.commit()

        await callback.answer("üóë –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await show_cart(callback)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", show_alert=True)

# ---------------------- –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã ----------------------
@router.callback_query(F.data == "clear_cart")
async def clear_cart_handler(callback: CallbackQuery):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = callback.from_user.id

        cursor.execute("""
            DELETE FROM cart WHERE user_id = ?
        """, (user_id,))
        conn.commit()

        await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

# ---------------------- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ----------------------
@router.callback_query(F.data == "checkout")
async def checkout_handler(callback: CallbackQuery):
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = callback.from_user.id

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cursor.execute("SELECT COUNT(*) FROM cart WHERE user_id = ?", (user_id,))
        if cursor.fetchone()[0] == 0:
            await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
        cursor.execute("""
            SELECT c.dish_id, m.name, m.price, c.quantity
            FROM cart c
            JOIN menu m ON c.dish_id = m.dish_id
            WHERE c.user_id = ?
        """, (user_id,))
        items = cursor.fetchall()

        # 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        total_amount = sum(item[2] * item[3] for item in items)

        # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–∫–∞–∑–µ
        order_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("""
            INSERT INTO orders (user_id, order_date, total_amount, status)
            VALUES (?, ?, ?, ?)
        """, (user_id, order_date, total_amount, "–ø—Ä–∏–Ω—è—Ç"))
        order_id = cursor.lastrowid

        # 5. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        for item in items:
            dish_id, name, price, quantity = item
            cursor.execute("""
                INSERT INTO order_items (order_id, dish_id, quantity, price)
                VALUES (?, ?, ?, ?)
            """, (order_id, dish_id, quantity, price))

        # 6. –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cursor.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
        conn.commit()

        # 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        order_details = "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        order_details += f"üÜî –ù–æ–º–µ—Ä: <code>#{order_id}</code>\n"
        order_details += f"üìÖ –î–∞—Ç–∞: {order_date}\n"
        order_details += f"üíµ –°—É–º–º–∞: {total_amount}‚ÇΩ\n\n"
        order_details += "<b>–°–æ—Å—Ç–∞–≤:</b>\n"

        for item in items:
            _, name, price, quantity = item
            order_details += f"‚Ä¢ {name} √ó {quantity} ‚Äî {price * quantity}‚ÇΩ\n"

        await callback.message.edit_text(
            order_details,
            reply_markup=None
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        conn.rollback()