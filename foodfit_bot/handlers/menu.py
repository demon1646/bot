from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging
from typing import Optional

from foodfit_bot.config.database import cursor, conn
from foodfit_bot.keyboards.inline import (
    build_dish_keyboard,
    build_filters_keyboard,
    build_pagination_keyboard
)
from foodfit_bot.keyboards.reply import main_menu_kb
from foodfit_bot.models.states import Form
from foodfit_bot.services.database_service import get_dish_info, search_dishes

router = Router()
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
MENU_PAGE_SIZE = 5


@router.message(F.text == "üçΩ –ú–µ–Ω—é")
@router.message(Command("menu"))
async def show_menu(message: Message, page: int = 1):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª—é–¥
        cursor.execute("SELECT COUNT(*) FROM menu")
        total_dishes = cursor.fetchone()[0]
        total_pages = (total_dishes + MENU_PAGE_SIZE - 1) // MENU_PAGE_SIZE

        # –ü–æ–ª—É—á–∞–µ–º –±–ª—é–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor.execute("""
            SELECT dish_id, name, price, calories, photo 
            FROM menu 
            ORDER BY name
            LIMIT ? OFFSET ?
        """, (MENU_PAGE_SIZE, (page - 1) * MENU_PAGE_SIZE))
        dishes = cursor.fetchall()

        if not dishes:
            await message.answer("üçΩ –ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for dish in dishes:
            dish_id, name, price, calories, photo = dish
            text = f"<b>{name}</b>\n\nüî• {calories} –∫–∫–∞–ª\nüíµ {price}‚ÇΩ"

            if photo:
                await message.answer_photo(
                    photo,
                    caption=text,
                    reply_markup=build_dish_keyboard(dish_id))
            else:
                await message.answer(
                    text,
                    reply_markup=build_dish_keyboard(dish_id))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
                if total_pages > 1:
                    await message.answer(
                        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
                        reply_markup=build_pagination_keyboard(
                            page=page,
                            total_pages=total_pages,
                            prefix="menu"
                        )
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("menu_page_"))
async def menu_page_handler(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –º–µ–Ω—é
    """
    page = int(callback.data.split("_")[2])
    await callback.message.delete()
    await show_menu(callback.message, page=page)


@router.callback_query(F.data.startswith("dish_detail_"))
async def show_dish_details(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ
    """
    try:
        dish_id = int(callback.data.split("_")[2])
        dish = get_dish_info(dish_id)

        if not dish:
            await callback.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        text = (
            f"üçΩ <b>{dish['name']}</b>\n\n"
            f"üìù {dish['description']}\n\n"
            f"üî• –ö–∞–ª–æ—Ä–∏–∏: {dish['calories']} –∫–∫–∞–ª\n"
            f"üíµ –¶–µ–Ω–∞: {dish['price']}‚ÇΩ\n"
            f"üè∑ –¢–µ–≥–∏: {dish['tags'] or '–Ω–µ—Ç'}"
        )

        if dish['photo']:
            await callback.message.answer_photo(
                dish['photo'],
                caption=text,
                reply_markup=build_dish_keyboard(dish_id))
        else:
            await callback.message.answer(
                text,
                reply_markup=build_dish_keyboard(dish_id))

            await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±–ª—é–¥–∞: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.message(F.text == "‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã")
@router.message(Command("filters"))
async def show_filters(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –º–µ–Ω—é
    """
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–ª—é–¥:",
        reply_markup=build_filters_keyboard()
    )


@router.callback_query(F.data.startswith("filter_"))
async def apply_filter(callback: CallbackQuery):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∫ –º–µ–Ω—é
    """
    filter_type = callback.data.split("_")[1]

    try:
        filters = {
            'vegan': {'vegan': True},
            'gluten_free': {'gluten_free': True},
            'spicy': {'tags': '%–æ—Å—Ç—Ä–æ–µ%'},
            'meat': {'tags': '%–º—è—Å–æ%'},
            'reset': {}
        }.get(filter_type, {})

        dishes = search_dishes("", filters)

        if not dishes:
            await callback.answer("üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for dish in dishes[:5]:
            text = f"<b>{dish['name']}</b>\n\nüî• {dish['calories']} –∫–∫–∞–ª\nüíµ {dish['price']}‚ÇΩ"
            await callback.message.answer(
                text,
                reply_markup=build_dish_keyboard(dish['dish_id']))

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", show_alert=True)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=main_menu_kb()
    )
    await show_menu(message)