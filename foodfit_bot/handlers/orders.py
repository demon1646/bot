from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging
from typing import List, Optional

from foodfit_bot.config.database import cursor, conn
from foodfit_bot.keyboards.inline import build_order_control_kb
from foodfit_bot.keyboards.reply import main_menu_kb, staff_kb
from foodfit_bot.models.states import Form, DeliveryStates
from foodfit_bot.services.database_service import (
    get_order_details,
    get_user_orders,
    update_order_status
)
from foodfit_bot.utils.helpers import format_order_date

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@router.message(Command("orders"))
async def show_user_orders(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        orders = get_user_orders(message.from_user.id)

        if not orders:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        response = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            response += (
                f"üÜî <b>#{order['order_id']}</b>\n"
                f"üìÖ {format_order_date(order['order_date'])}\n"
                f"üíµ –°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_order_details(order_id)

        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        response = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['customer_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {format_order_date(order['order_date'])}\n"
            f"üíµ –°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤:</b>\n"
        )

        for item in order['items']:
            response += f"‚Ä¢ {item['name']} √ó {item['quantity']} ‚Äî {item['price'] * item['quantity']}‚ÇΩ\n"

        await callback.message.answer(response)
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.message(F.text == "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã")
async def show_active_orders(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞)"""
    try:
        cursor.execute("""
            SELECT o.order_id, u.full_name, o.order_date, o.total_amount 
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            WHERE o.status IN ('–ø—Ä–∏–Ω—è—Ç', '–≥–æ—Ç–æ–≤–∏—Ç—Å—è', '–≤ –¥–æ—Å—Ç–∞–≤–∫–µ')
            ORDER BY o.order_date DESC
        """)
        orders = cursor.fetchall()

        if not orders:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return

        response = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            order_id, customer, date, total = order
            response += (
                f"üÜî <b>#{order_id}</b>\n"
                f"üë§ {customer}\n"
                f"üìÖ {format_order_date(date)}\n"
                f"üíµ {total}‚ÇΩ\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )

        await message.answer(
            response,
            reply_markup=staff_kb()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


@router.callback_query(F.data.startswith("complete_order_"))
async def complete_order_handler(callback: CallbackQuery):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
    try:
        order_id = int(callback.data.split("_")[2])
        if update_order_status(order_id, "–∑–∞–≤–µ—Ä—à–µ–Ω"):
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"
            )
        else:
            await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("to_delivery_"))
async def to_delivery_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å '–≤ –¥–æ—Å—Ç–∞–≤–∫–µ'"""
    try:
        order_id = int(callback.data.split("_")[2])
        if update_order_status(order_id, "–≤ –¥–æ—Å—Ç–∞–≤–∫–µ"):
            await callback.answer("üöö –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É")
            await callback.message.edit_reply_markup(
                reply_markup=build_order_control_kb(order_id)
            )
        else:
            await callback.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑")
async def ask_order_number(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Form.waiting_for_order_id)


@router.message(Form.waiting_for_order_id)
async def complete_order_by_number(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É"""
    try:
        order_id = int(message.text)
        if update_order_status(order_id, "–∑–∞–≤–µ—Ä—à–µ–Ω"):
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π",
                reply_markup=staff_kb()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑",
                reply_markup=staff_kb()
            )
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
            reply_markup=staff_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=staff_kb()
        )
    finally:
        await state.clear()


@router.message(F.text == "üöö –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É")
async def start_delivery_process(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(DeliveryStates.waiting_address)


@router.message(DeliveryStates.waiting_address)
async def process_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00):")
    await state.set_state(DeliveryStates.waiting_time)


@router.message(DeliveryStates.waiting_time)
async def process_delivery_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.update_data(time=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await state.set_state(DeliveryStates.waiting_contact)


@router.message(DeliveryStates.waiting_contact)
async def process_delivery_contact(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    data = await state.get_data()

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ë–î
    await message.answer(
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {message.text}",
        reply_markup=main_menu_kb()
    )
    await state.clear()