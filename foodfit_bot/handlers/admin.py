from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputFile, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
import os
import logging
from foodfit_bot.config.database import cursor, conn
from foodfit_bot.handlers.commands import admin_panel
from foodfit_bot.keyboards.reply import admin_kb, cancel_kb, main_menu_kb
from foodfit_bot.keyboards.inline import (
    build_admin_dish_edit_kb,
    build_delete_confirmation_kb
)
from foodfit_bot.models.states import Form
from foodfit_bot.services.database_service import is_admin
from foodfit_bot.services.ai_service import generate_ai_description
from foodfit_bot.utils.helpers import validate_price

router = Router()
logger = logging.getLogger(__name__)


# ---------------------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------------------
@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ")
async def add_dish_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await state.set_state(Form.dish_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:", reply_markup=cancel_kb())


# ---------------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ ----------------------
@router.message(Form.dish_name)
async def add_dish_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.dish_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–ª—é–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):")


@router.message(Form.dish_price)
async def add_dish_price(message: Message, state: FSMContext):
    if not validate_price(message.text):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!")
        return

    price = int(message.text)
    await state.update_data(price=price)

    data = await state.get_data()
    dish_name = data['name']

    generating_msg = await message.answer("üßë‚Äçüç≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞...")
    description = await generate_ai_description(dish_name)
    await generating_msg.delete()

    await state.update_data(description=description)
    await state.set_state(Form.dish_cal)
    await message.answer(
        f"üçΩ {dish_name}\n\n{description}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:"
    )


@router.message(Form.dish_cal)
async def add_dish_calories(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    calories = int(message.text)
    await state.update_data(calories=calories)
    await state.set_state(Form.dish_tags)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–≤–µ–≥–∞–Ω, –±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ –∏ —Ç.–¥.):")


@router.message(Form.dish_tags)
async def add_dish_tags(message: Message, state: FSMContext):
    await state.update_data(tags=message.text)
    await state.set_state(Form.dish_photo)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=cancel_kb()
    )


@router.message(Form.dish_photo)
async def add_dish_photo(message: Message, state: FSMContext):
    data = await state.get_data()

    if message.text and message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photo_path = None
    elif message.photo:
        photo_id = message.photo[-1].file_id
        photo = await message.bot.get_file(photo_id)
        os.makedirs("photos", exist_ok=True)
        photo_path = f"photos/{photo_id}.jpg"
        await message.bot.download_file(photo.file_path, photo_path)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    cursor.execute(
        """INSERT INTO menu (name, description, price, calories, tags, photo) 
        VALUES (?, ?, ?, ?, ?, ?)""",
        (data['name'], data['description'], data['price'],
         data['calories'], data['tags'], photo_path)
    )
    conn.commit()

    await message.answer(
        f"‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
        f"üçΩ {data['name']}\n"
        f"üìù {data['description']}\n"
        f"üíµ {data['price']}‚ÇΩ\n"
        f"üî• {data['calories']} –∫–∫–∞–ª\n"
        f"üè∑ {data['tags']}",
        reply_markup=admin_kb()
    )
    await state.clear()


# ---------------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ ----------------------
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ")
async def edit_dish_start(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    dishes = cursor.execute("SELECT dish_id, name FROM menu").fetchall()

    if not dishes:
        await message.answer("–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ")
        return

    builder = types.InlineKeyboardBuilder()
    for dish_id, name in dishes:
        builder.button(text=name, callback_data=f"editdish_{dish_id}")
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("editdish_"))
async def select_dish_to_edit(callback: CallbackQuery, state: FSMContext):
    dish_id = int(callback.data.split("_")[1])
    await state.update_data(dish_id=dish_id)

    await callback.message.edit_text(
        "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=build_admin_dish_edit_kb()
    )
    await state.set_state(Form.waiting_for_edit_choice)


@router.callback_query(F.data.startswith("editfield_"), Form.waiting_for_edit_choice)
async def select_field_to_edit(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)

    field_names = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "price": "—Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö)",
        "calories": "–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å",
        "tags": "—Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
        "photo": "—Ñ–æ—Ç–æ (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)"
    }

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_names[field]}:",
        reply_markup=cancel_kb()
    )
    await state.set_state(Form.waiting_for_edit_value)


@router.message(Form.waiting_for_edit_value)
async def save_edited_value(message: Message, state: FSMContext):
    data = await state.get_data()
    dish_id = data['dish_id']
    field = data['field']

    try:
        if field in ['price', 'calories']:
            new_value = int(message.text)
        elif field == 'photo':
            if not message.photo:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
                return

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ
            old_photo = cursor.execute(
                "SELECT photo FROM menu WHERE dish_id = ?",
                (dish_id,)
            ).fetchone()[0]

            if old_photo and os.path.exists(old_photo):
                os.remove(old_photo)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ
            photo_id = message.photo[-1].file_id
            photo = await message.bot.get_file(photo_id)
            photo_path = f"photos/{photo_id}.jpg"
            await message.bot.download_file(photo.file_path, photo_path)
            new_value = photo_path
        else:
            new_value = message.text

        cursor.execute(
            f"UPDATE menu SET {field} = ? WHERE dish_id = ?",
            (new_value, dish_id)
        )
        conn.commit()

        dish_name = cursor.execute(
            "SELECT name FROM menu WHERE dish_id = ?",
            (dish_id,)
        ).fetchone()[0]

        await message.answer(
            f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=admin_kb()
        )
    except ValueError:
        await message.answer("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    finally:
        await state.clear()


# ---------------------- –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ ----------------------
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ")
async def delete_dish_start(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    dishes = cursor.execute("SELECT dish_id, name FROM menu").fetchall()

    if not dishes:
        await message.answer("–ú–µ–Ω—é –ø—É—Å—Ç–æ–µ")
        return

    builder = types.InlineKeyboardBuilder()
    for dish_id, name in dishes:
        builder.button(text=name, callback_data=f"delete_{dish_id}")
    builder.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("delete_"))
async def confirm_delete_dish(callback: CallbackQuery):
    dish_id = int(callback.data.split("_")[1])
    dish_name = cursor.execute(
        "SELECT name FROM menu WHERE dish_id = ?",
        (dish_id,)
    ).fetchone()[0]

    await callback.message.edit_text(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ '{dish_name}'?",
        reply_markup=build_delete_confirmation_kb(dish_id)
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def execute_delete_dish(callback: CallbackQuery):
    dish_id = int(callback.data.split("_")[2])
    dish_name = cursor.execute(
        "SELECT name FROM menu WHERE dish_id = ?",
        (dish_id,)
    ).fetchone()[0]

    # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    photo_path = cursor.execute(
        "SELECT photo FROM menu WHERE dish_id = ?",
        (dish_id,)
    ).fetchone()[0]

    if photo_path and os.path.exists(photo_path):
        os.remove(photo_path)

    cursor.execute("DELETE FROM menu WHERE dish_id = ?", (dish_id,))
    conn.commit()

    await callback.message.edit_text(
        f"‚úÖ –ë–ª—é–¥–æ '{dish_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
    )
    await admin_panel(callback.message)


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_dish(callback: CallbackQuery):
    await callback.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await admin_panel(callback.message)


# ---------------------- –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ ----------------------
@router.message(F.text == "üìä –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
async def show_orders(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return

    try:
        cursor.execute("""
            SELECT o.order_id, u.full_name, o.order_date, o.total_amount 
            FROM orders o
            JOIN users u ON o.user_id = u.user_id
            ORDER BY o.order_date DESC
            LIMIT 10
        """)
        orders = cursor.fetchall()

        if not orders:
            await message.answer("üì¶ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return

        response = "üì¶ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
        for order in orders:
            order_id, customer, date, total = order
            response += (
                f"üÜî <b>#{order_id}</b>\n"
                f"üë§ {customer}\n"
                f"üìÖ {date}\n"
                f"üíµ {total}‚ÇΩ\n"
                f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            )

        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")


# ---------------------- –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏ ----------------------
@router.message(F.text == "üîô –í—ã—Ö–æ–¥")
async def exit_admin(message: Message):
    await message.answer(
        "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ‚úÖ",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )
