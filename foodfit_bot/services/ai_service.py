import re
import logging
import requests
from typing import Optional
from datetime import datetime

from foodfit_bot.config.config import API_URL, API_HEADERS
from foodfit_bot.utils.helpers import clean_text

logger = logging.getLogger(__name__)


class AIService:
    @staticmethod
    async def generate_dish_description(dish_name: str, attempts: int = 3) -> Optional[str]:

        prompt = (
            "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ò –Ω–∞–ø–∏—à–∏ –ë–ñ–£ –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ –±–ª—é–¥–∞"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "1. –¢–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –æ –±–ª—é–¥–µ\n"
            "2. –ë–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ ('–≠—Ç–æ', '–•–æ—Ä–æ—à–æ' –∏ —Ç.–¥.)\n"
            "3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n\n"
            "4. –ë–ñ–£ –¥–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞"
            f"–ü—Ä–∏–º–µ—Ä –¥–ª—è '–°—Ç–µ–π–∫': '–ú—Ä–∞–º–æ—Ä–Ω–∞—è –≥–æ–≤—è–¥–∏–Ω–∞ —Å—É—Ö–æ–π –≤—ã–¥–µ—Ä–∂–∫–∏, –æ–±–∂–∞—Ä–µ–Ω–Ω–∞—è –Ω–∞ –≥—Ä–∏–ª–µ. "
            "–ü–æ–¥–∞–µ—Ç—Å—è —Å —Ç—Ä—é—Ñ–µ–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º –∏ –∑–∞–ø–µ—á–µ–Ω–Ω—ã–º–∏ –æ–≤–æ—â–∞–º–∏.'\n\n"
            f"–ë–ª—é–¥–æ: {dish_name}\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ:"
            "–ë–ñ–£:"
        )

        data = {
            "model": "deepseek-ai/DeepSeek-R1-0528",
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä, —Å–æ—Å—Ç–∞–≤–ª—è–µ—à—å  –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥. "
                        "–í —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: \n"
                        "- –í–≤–æ–¥–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
                        "- –û–±—â–∏–µ —Ñ—Ä–∞–∑—ã\n"
                        "- –¢–µ–≥–∏ <think>\n"
                        "–ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –æ–ø–∏—Å–∞–Ω–∏—è."
                    )
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        }

        for attempt in range(attempts):
            try:
                response = requests.post(API_URL, headers=API_HEADERS, json=data)
                response.raise_for_status()
                result = response.json()
                description = result['choices'][0]['message']['content']

                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                description = re.sub(r'<[^>]+>|–•–æ—Ä–æ—à–æ,|–ò—Ç–∞–∫,|–î–∞–≤–∞–π|\.\.\.', '', description).strip()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                if len(description.split()) >= 6 and '.' in description:  # –ú–∏–Ω–∏–º—É–º 6 —Å–ª–æ–≤ –∏ —Ç–æ—á–∫–∞
                    return description

                logger.warning(f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")

        return None

    @staticmethod
    async def generate_daily_recommendation(user_preferences: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –±–ª—é–¥–∞
        :param user_preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏–ª–∏ None
        """
        prompt = (
            f"–¢—ã –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–π –æ–¥–Ω–æ –±–ª—é–¥–æ –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.\n"
            f"–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
            f"1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–æ)\n"
            f"2. –ö—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n\n"
            f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {user_preferences}\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:"
        )

        try:
            data = {
                "model": "deepseek-ai/DeepSeek-R1-0528",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –¥–∞–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–ª—é–¥. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": 150
            }

            response = requests.post(API_URL, headers=API_HEADERS, json=data, timeout=7)
            response.raise_for_status()

            result = response.json()
            recommendation = result['choices'][0]['message']['content']
            return clean_text(recommendation.split('\n')[0].strip())  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {str(e)}")
            return None

    @staticmethod
    async def analyze_feedback(feedback_text: str) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Å –ø–æ–º–æ—â—å—é AI
        :param feedback_text: –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        :return: –ê–Ω–∞–ª–∏–∑ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        prompt = (
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏:\n"
            f"1. –û—Å–Ω–æ–≤–Ω—É—é —ç–º–æ—Ü–∏—é (–ø–æ–∑–∏—Ç–∏–≤/–Ω–µ–π—Ç—Ä–∞–ª/–Ω–µ–≥–∞—Ç–∏–≤)\n"
            f"2. –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã (–∫–∞—á–µ—Å—Ç–≤–æ, —Å–µ—Ä–≤–∏—Å, –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç.–¥.)\n"
            f"3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
            f"–û—Ç–∑—ã–≤: {feedback_text}\n\n"
            f"–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:"
        )

        try:
            data = {
                "model": "deepseek-ai/DeepSeek-R1-0528",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –æ—Ç–∑—ã–≤—ã. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "response_format": {"type": "json_object"}
            }

            response = requests.post(API_URL, headers=API_HEADERS, json=data, timeout=10)
            response.raise_for_status()

            result = response.json()
            return result['choices'][0]['message']['content']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–∞: {str(e)}")
            return {
                "sentiment": "neutral",
                "topics": [],
                "suggestions": []
            }

    @staticmethod
    async def generate_daily_special(date: datetime = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è
        :param date: –î–∞—Ç–∞ –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        :return: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        """
        date_str = date.strftime("%d %B") if date else "—Å–µ–≥–æ–¥–Ω—è"

        prompt = (
            f"–ü—Ä–∏–¥—É–º–∞–π '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–Ω—è' –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n"
            f"–§–æ—Ä–º–∞—Ç:\n"
            f"1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
            f"2. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)\n"
            f"3. –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è (—Å–∫–∏–¥–∫–∞/–ø–æ–¥–∞—Ä–æ–∫)\n\n"
            f"–î–∞—Ç–∞: {date_str}\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
        )

        try:
            data = {
                "model": "deepseek-ai/DeepSeek-R1",
                "messages": [
                    {
                        "role": "system",
                        "content": "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "max_tokens": 200
            }

            response = requests.post(API_URL, headers=API_HEADERS, json=data, timeout=7)
            response.raise_for_status()

            result = response.json()
            return clean_text(result['choices'][0]['message']['content'])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
            return f"üçΩ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {date_str}!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à —à–µ—Ñ-—Å—é—Ä–ø—Ä–∏–∑ —Å–æ —Å–∫–∏–¥–∫–æ–π 15%!"


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é)
async def generate_ai_description(*args, **kwargs):
    return await AIService.generate_dish_description(*args, **kwargs)


async def get_ai_recommendation(*args, **kwargs):
    return await AIService.generate_daily_recommendation(*args, **kwargs)