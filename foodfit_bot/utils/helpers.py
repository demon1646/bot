import re
from datetime import datetime
from typing import Optional, Union, Dict, List
import logging

logger = logging.getLogger(__name__)


def clean_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤, –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∏ HTML-—Ç–µ–≥–æ–≤
    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    :return: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""

    # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
    clean = re.sub(r'<[^>]+>', '', text)
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    clean = re.sub(r'\s+', ' ', clean).strip()
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
    clean = re.sub(r'[^\w\s.,!?–∞-—è–ê-–Ø—ë–Å\-]', '', clean)

    return clean


def validate_price(price_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω–æ–π
    :param price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π
    :return: bool
    """
    try:
        price = float(price_str)
        return price > 0
    except (ValueError, TypeError):
        return False


def format_order_date(date_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    :param date_str: –î–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ –ë–î
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
    """
    try:
        date_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        return date_obj.strftime("%d.%m.%Y –≤ %H:%M")
    except (ValueError, TypeError):
        return date_str


def calculate_calories(dishes: List[Dict]) -> int:
    """
    –°—á–∏—Ç–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–∫–∞–∑–µ
    :param dishes: –°–ø–∏—Å–æ–∫ –±–ª—é–¥ —Å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    :return: –°—É–º–º–∞—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
    """
    return sum(dish['calories'] * dish.get('quantity', 1) for dish in dishes)


def split_text(text: str, max_length: int = 4000) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤
    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    :param max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏
    :return: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    if len(text) <= max_length:
        return [text]

    parts = []
    while text:
        part = text[:max_length]
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–æ—á–∫—É
        split_pos = max(
            part.rfind('\n'),
            part.rfind('. '),
            part.rfind('! '),
            part.rfind('? ')
        )

        if split_pos > 0:
            parts.append(text[:split_pos + 1])
            text = text[split_pos + 1:]
        else:
            parts.append(text[:max_length])
            text = text[max_length:]

    return parts


def extract_phone_number(text: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    :param text: –¢–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :return: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ None
    """
    phone_regex = r'(?:\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}'
    match = re.search(phone_regex, text)
    return match.group(0) if match else None


def format_dish_description(dish: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    :param dish: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –±–ª—é–¥–µ
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    return (
        f"üçΩ <b>{dish.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n\n"
        f"üìù {dish.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        f"üî• {dish.get('calories', 0)} –∫–∫–∞–ª\n"
        f"üíµ {dish.get('price', 0)}‚ÇΩ\n"
        f"üè∑ –¢–µ–≥–∏: {dish.get('tags', '–Ω–µ—Ç')}"
    )


def parse_time_input(time_str: str) -> Optional[datetime]:
    """
    –ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º—è
    :param time_str: –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "18:30")
    :return: –û–±—ä–µ–∫—Ç datetime –∏–ª–∏ None
    """
    try:
        hours, minutes = map(int, time_str.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            now = datetime.now()
            return now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
    except (ValueError, AttributeError):
        return None


def calculate_delivery_time(address: str) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
    :param address: –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    :return: –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    """
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∫–∞—Ä—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    base_time = 30
    additional_time = len(address) // 10  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    return base_time + additional_time


def generate_order_summary(order: Dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–∫–∞–∑—É
    :param order: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    :return: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    items_text = "\n".join(
        f"‚Ä¢ {item['name']} √ó {item['quantity']} ‚Äî {item['price'] * item['quantity']}‚ÇΩ"
        for item in order.get('items', [])
    )

    return (
        f"üÜî <b>–ó–∞–∫–∞–∑ #{order.get('order_id', '')}</b>\n"
        f"üìÖ {format_order_date(order.get('order_date', ''))}\n"
        f"üíµ –ò—Ç–æ–≥–æ: {order.get('total_amount', 0)}‚ÇΩ\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {order.get('status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤:</b>\n{items_text}"
    )


def validate_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email –∞–¥—Ä–µ—Å–∞
    :param email: –°—Ç—Ä–æ–∫–∞ —Å email
    :return: bool
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))